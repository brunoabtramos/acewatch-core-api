version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: acewatch-db
    environment:
      POSTGRES_DB: acewatch_db
      POSTGRES_USER: acewatch
      POSTGRES_PASSWORD: acewatch123
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - acewatch-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acewatch -d acewatch_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core API Service (FastAPI + PostgreSQL)
  core-api:
    build:
      context: ./acewatch-core-api
      dockerfile: Dockerfile
    container_name: acewatch-core-api
    environment:
      DATABASE_URL: postgresql://acewatch:acewatch123@db:5432/acewatch_db
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-jwt-key-change-in-production-please-make-it-very-long-and-random}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - acewatch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Scores Service removed - data now comes directly from Core API via TheSportsDB

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./acewatch-frontend
      dockerfile: Dockerfile
    container_name: acewatch-frontend
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - core-api
    networks:
      - acewatch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  acewatch-network:
    driver: bridge
